/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RemoveFiles.java
 *
 * Created on 06/06/2012, 09:49:28
 */
package removefiles;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author rkuninari
 */
public class RemoveFiles extends javax.swing.JFrame
{

    /** Creates new form RemoveFiles */
    public RemoveFiles()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonRemoveFiles = new javax.swing.JLabel();
        legenda = new javax.swing.JLabel();
        legend = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Remover Arquivos e Diretórios");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel1.setText("<html>\n<h1>Remover Diretórios e Arquivos:</h1>\n<br>-GLASSFISH_HOME\\domains\\domain1\\generated\n<br>-GLASSFISH_HOME\\domains\\domain1\\osgi-cache\n</html>");

        buttonRemoveFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png"))); // NOI18N
        buttonRemoveFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonRemoveFilesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonRemoveFilesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonRemoveFilesMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonRemoveFilesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buttonRemoveFilesMouseReleased(evt);
            }
        });

        legend.setText("<HTML>\n...<BR>\n...<BR>\n...\n</HMTL>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(legend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(buttonRemoveFiles)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonRemoveFiles)
                .addGap(18, 18, 18)
                .addComponent(legend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRemoveFilesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonRemoveFilesMouseClicked
    {//GEN-HEADEREND:event_buttonRemoveFilesMouseClicked
        executarGlassFish("Processando...");
        //executarGlassFish("Parando Servidor GlassFish...", "/commands/stop.bat");
        //executarGlassFish("Iniciando Servidor GlassFish...", "/commands/start.bat");
        //executarGlassFish("Iniciando Servidor GlassFish...", "asadmin start-domain domain1", 10, 0);
        //executarGlassFish("Iniciando Servidor GlassFish...", "/commands/start.bat");
    }//GEN-LAST:event_buttonRemoveFilesMouseClicked

    private void buttonRemoveFilesMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonRemoveFilesMouseEntered
    {//GEN-HEADEREND:event_buttonRemoveFilesMouseEntered
        buttonRemoveFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trashSelect.png")));
    }//GEN-LAST:event_buttonRemoveFilesMouseEntered

    private void buttonRemoveFilesMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonRemoveFilesMouseExited
    {//GEN-HEADEREND:event_buttonRemoveFilesMouseExited
        buttonRemoveFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png")));
    }//GEN-LAST:event_buttonRemoveFilesMouseExited

    private void buttonRemoveFilesMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonRemoveFilesMousePressed
    {//GEN-HEADEREND:event_buttonRemoveFilesMousePressed
        buttonRemoveFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trashClick.png")));
    }//GEN-LAST:event_buttonRemoveFilesMousePressed

    private void buttonRemoveFilesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buttonRemoveFilesMouseReleased
    {//GEN-HEADEREND:event_buttonRemoveFilesMouseReleased
        buttonRemoveFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash.png")));
    }//GEN-LAST:event_buttonRemoveFilesMouseReleased

    /**
     * Deleta todos os arquivos e subdiretorios.
     * Retorna verdadeiro se todas as remoções aconteceram com sucesso.
     * @param dir
     * @return True: Se todas as remoções aconteceram com sucesso.
     * <br>False: Se houve falha, o método será interrompido.
     */
    public static boolean deleteDir(File dir)
    {
        if (dir.isDirectory())
        {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++)
            {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success)
                {
                    return false;
                }
            }
        }
        //return true;
        // Agora o diretório está vazio, restando apenas deletá-lo.
        return dir.delete();
    }

    public boolean removerDiretoriosArquivos()
    {
        String path = System.getenv("GLASSFISH_HOME");
        File generated = new File(path + "\\domains\\domain1\\generated");
        File osgiCache = new File(path + "\\domains\\domain1\\osgi-cache");
        if (generated.exists() == true && osgiCache.exists() == true)
        {
            boolean delGenerated = deleteDir(generated);
            boolean delOsgiCache = deleteDir(osgiCache);
            if (delGenerated == true && delOsgiCache == true)
            {
                //JOptionPane.showMessageDialog(null, "Diretórios e Arquivos Removidos com Sucesso!", "Diretórios e Arquivos Removidos com Sucesso!", JOptionPane.INFORMATION_MESSAGE);
                return true;
            }
            else if (delGenerated == true && delOsgiCache == false)
            {
                //JOptionPane.showMessageDialog(null, "Falha ao Remover Diretório:\n"
                //+ "C:\\glassfish3.1.2-web\\glassfish\\domains\\domain1\\osgi-cache!", "Falha ao Remover Diretórios e Arquivos!", JOptionPane.ERROR_MESSAGE);
                legend.setText("<HTML>Falha ao Remover Diretório:<BR>"
                               + path + "\\domains\\domain1\\osgi-cache</HTML>");
            }
            else if (delGenerated == false && delOsgiCache == true)
            {
                //JOptionPane.showMessageDialog(null, "Falha ao Remover Diretório:\n"
                //+ "C:\\glassfish3.1.2-web\\glassfish\\domains\\domain1\\generated", "Falha ao Remover Diretórios e Arquivos!", JOptionPane.ERROR_MESSAGE);
                legend.setText("<HTML>Falha ao Remover Diretório:<BR>"
                               + path + "\\domains\\domain1\\generated</HTML>");
            }
            else
            {
                //JOptionPane.showMessageDialog(null, "Falha ao Remover Diretórios:\n"
                //+ "C:\\glassfish3.1.2-web\\glassfish\\domains\\domain1\\generated\n"
                //+ "C:\\glassfish3.1.2-web\\glassfish\\domains\\domain1\\osgi-cache", "Falha ao Remover Diretórios e Arquivos!", JOptionPane.ERROR_MESSAGE);
                legend.setText("<HTML>Falha ao Remover Diretórios:<BR>"
                               + path + "\\domains\\domain1\\generated<BR>"
                               + path + "\\domains\\domain1\\osgi-cache</HTML>");
            }
        }
        else
        {
            //JOptionPane.showMessageDialog(null, "Falha ao Remover Diretório!\nDiretórios não existem!", "Falha ao Remover Diretórios e Arquivos!", JOptionPane.ERROR_MESSAGE);
            legend.setText("<HTML>Falha ao Remover Diretório!<BR>Diretórios não existem!</HTML>");
        }
        return false;
    }

    public void removendoDiretoriosArquivos()
    {
        final Progress barra = new Progress("Removendo Arquivos e Diretórios...");
        barra.setVisible(true);
        SwingWorker worker = new SwingWorker()
        {

            @Override
            protected Object doInBackground() throws Exception
            {
                removerDiretoriosArquivos();
                return null;
            }

            @Override
            protected void done()
            {
                barra.setVisible(false);
            }

        };
        worker.execute();
    }

    public void executarGlassFish(String mensagem)
    {
        final Progress barra = new Progress(mensagem);
        barra.setVisible(true);
        SwingWorker worker = new SwingWorker()
        {

            @Override
            protected Object doInBackground() throws Exception
            {
                //executarProcesso(comando, waitBefore, waitAfter);
                pararRemoverELimpar();
                return null;
            }

            @Override
            protected void done()
            {
                barra.setVisible(false);
            }

        };
        worker.execute();
    }

    public void executarProcesso(String comando, int waitBefore, int waitAfter) throws IOException
    {
        wait(waitBefore);
        Runtime.getRuntime().exec(comando);
        wait(waitAfter);
    }

    public static void wait(int n)
    {
        long t0, t1;
        t0 = System.currentTimeMillis();
        do
        {
            t1 = System.currentTimeMillis();
        }
        while ((t1 - t0) < (n * 1000));
    }

    public void pararRemoverELimpar()
    {
        try
        {
            legend.setText("<HTML>Parando Servidor GlassFish...</HTML>");
            String path = System.getenv("GLASSFISH_HOME");
            Runtime.getRuntime().exec(path + "\\bin\\asadmin.bat stop-domain domain1");
            wait(20);
            legend.setText("<HTML>Parando Servidor GlassFish...<BR>"
                           + "Removendo Diretórios e Arquivos...</HTML>");
            if (removerDiretoriosArquivos())
            {
                legend.setText("<HTML>Parando Servidor GlassFish...<BR>"
                               + "Removendo Diretórios e Arquivos...<BR>"
                               + "Iniciando Servidor GlassFish...</HTML>");
                wait(10);
                Runtime.getRuntime().exec(path + "\\bin\\asadmin.bat start-domain domain1");
                legend.setText("<HTML>Processamento Concluído com Sucesso!</HTML>");
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(RemoveFiles.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RemoveFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RemoveFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RemoveFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RemoveFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new RemoveFiles().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel buttonRemoveFiles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel legend;
    private javax.swing.JLabel legenda;
    // End of variables declaration//GEN-END:variables
}
